name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_PACKAGE_PATH: './backend'

jobs:
  # Code Quality and Testing
  quality-gate:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Lint code
      working-directory: ./backend
      run: npm run lint

    - name: Check TypeScript compilation
      working-directory: ./backend
      run: npm run build

    - name: Run unit tests
      working-directory: ./backend
      run: npm run test:cov

    - name: Run e2e tests
      working-directory: ./backend
      run: npm run test:e2e

    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: backend

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run npm audit
      working-directory: ./backend
      run: npm audit --audit-level high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --project-name=insta-agent-backend --file=backend/package.json

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-gate, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci --only=production

    - name: Build application
      working-directory: ./backend
      run: npm run build

    - name: Create deployment package
      working-directory: ./backend
      run: |
        mkdir -p ../deployment-package
        cp -r dist node_modules package.json package-lock.json ../deployment-package/
        cd ../deployment-package
        zip -r ../backend-deployment.zip .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend-deployment.zip
        retention-days: 30

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - name: Deploy to Azure App Service (Dev)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME_DEV }}
        slot-name: 'production'
        package: backend-deployment.zip

    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.AZURE_WEBAPP_URL_DEV }}/health || exit 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

    - name: Deploy to Azure App Service (Staging Slot)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME_STAGING }}
        slot-name: 'staging'
        package: backend-deployment.zip

    - name: Health check (Staging)
      run: |
        sleep 30
        curl -f ${{ secrets.AZURE_WEBAPP_URL_STAGING }}/health || exit 1

    - name: Run smoke tests against staging
      run: |
        echo "Running smoke tests against staging environment"
        # Add your smoke test commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Deploy to Azure App Service (Production)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME_PROD }}
        slot-name: 'staging'
        package: backend-deployment.zip

    - name: Health check (Production Staging Slot)
      run: |
        sleep 30
        curl -f ${{ secrets.AZURE_WEBAPP_URL_PROD }}-staging.azurewebsites.net/health || exit 1

    - name: Swap staging to production
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az webapp deployment slot swap \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PROD }} \
            --slot staging \
            --target-slot production

    - name: Final health check (Production)
      run: |
        sleep 30
        curl -f ${{ secrets.AZURE_WEBAPP_URL_PROD }}/health || exit 1

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üöÄ Backend deployment to production completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'üö® Backend deployment to production failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  # Rollback (Manual trigger only)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Rollback production deployment
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Rolling back to previous deployment..."
          az webapp deployment slot swap \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PROD }} \
            --slot production \
            --target-slot staging

    - name: Health check after rollback
      run: |
        sleep 30
        curl -f ${{ secrets.AZURE_WEBAPP_URL_PROD }}/health || exit 1

    - name: Notify rollback completion
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '‚èÆÔ∏è Backend rollback completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 