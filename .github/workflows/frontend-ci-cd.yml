name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18.x'
  BUILD_PATH: './frontend'

jobs:
  # Code Quality and Testing
  quality-gate:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint code (ESLint)
      working-directory: ./frontend
      run: npm run lint

    - name: Check code formatting (Prettier)
      working-directory: ./frontend
      run: npm run format:check

    - name: Check TypeScript compilation
      working-directory: ./frontend
      run: npm run type-check

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: frontend

  # Security and Dependency Scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --project-name=insta-agent-frontend --file=frontend/package.json

    - name: Check for known vulnerabilities
      working-directory: ./frontend
      run: |
        npx audit-ci --config audit-ci.json

  # Accessibility and Performance Testing
  accessibility-performance:
    name: Accessibility & Performance
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_API_URL: 'https://api-test.instagramaiagent.com'
        VITE_ENVIRONMENT: 'test'

    - name: Start preview server
      working-directory: ./frontend
      run: |
        npm run preview &
        sleep 10

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Run accessibility tests (axe-core)
      working-directory: ./frontend
      run: npm run test:a11y

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-gate, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Set environment variables
      run: |
        case "${{ matrix.environment }}" in
          dev)
            echo "VITE_API_URL=${{ secrets.API_URL_DEV }}" >> $GITHUB_ENV
            echo "VITE_ENVIRONMENT=development" >> $GITHUB_ENV
            ;;
          staging)
            echo "VITE_API_URL=${{ secrets.API_URL_STAGING }}" >> $GITHUB_ENV
            echo "VITE_ENVIRONMENT=staging" >> $GITHUB_ENV
            ;;
          prod)
            echo "VITE_API_URL=${{ secrets.API_URL_PROD }}" >> $GITHUB_ENV
            echo "VITE_ENVIRONMENT=production" >> $GITHUB_ENV
            ;;
        esac
        echo "VITE_APP_VERSION=${{ github.sha }}" >> $GITHUB_ENV
        echo "VITE_BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

    - name: Build application for ${{ matrix.environment }}
      working-directory: ./frontend
      run: npm run build

    - name: Generate build info
      working-directory: ./frontend
      run: |
        echo "{
          \"version\": \"${{ github.sha }}\",
          \"buildTime\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"environment\": \"${{ matrix.environment }}\",
          \"branch\": \"${{ github.ref_name }}\",
          \"commit\": \"${{ github.sha }}\"
        }" > dist/build-info.json

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.environment }}
        path: frontend/dist/
        retention-days: 30

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-dev
        path: ./dist

    - name: Deploy to Azure Static Web Apps (Dev)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: '/dist'
        skip_app_build: true
        skip_api_build: true

    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.FRONTEND_URL_DEV }} || exit 1

    - name: Run smoke tests
      run: |
        npx playwright test --config=frontend/playwright.config.ts --grep="@smoke"
      env:
        PLAYWRIGHT_BASE_URL: ${{ secrets.FRONTEND_URL_DEV }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-staging
        path: ./dist

    - name: Deploy to Azure Static Web Apps (Staging)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: '/dist'
        skip_app_build: true
        skip_api_build: true

    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.FRONTEND_URL_STAGING }} || exit 1

    - name: Run full test suite
      run: |
        npx playwright test --config=frontend/playwright.config.ts
      env:
        PLAYWRIGHT_BASE_URL: ${{ secrets.FRONTEND_URL_STAGING }}

    - name: Performance audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.FRONTEND_URL_STAGING }}
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-prod
        path: ./dist

    - name: Deploy to Azure Static Web Apps (Production)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: '/dist'
        skip_app_build: true
        skip_api_build: true

    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.FRONTEND_URL_PROD }} || exit 1

    - name: Production smoke tests
      run: |
        npx playwright test --config=frontend/playwright.config.ts --grep="@smoke"
      env:
        PLAYWRIGHT_BASE_URL: ${{ secrets.FRONTEND_URL_PROD }}

    - name: Final performance audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.FRONTEND_URL_PROD }}
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true

    - name: Update deployment status
      run: |
        echo "Frontend deployment to production completed successfully"
        echo "Version: ${{ github.sha }}"
        echo "Environment: production"
        echo "URL: ${{ secrets.FRONTEND_URL_PROD }}"

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 Frontend deployment to production completed successfully!'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '🚨 Frontend deployment to production failed!'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  # E2E Tests (Full Application)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Run E2E tests
      working-directory: ./frontend
      run: npx playwright test
      env:
        PLAYWRIGHT_BASE_URL: ${{ secrets.FRONTEND_URL_STAGING }}
        API_BASE_URL: ${{ secrets.API_URL_STAGING }}

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results/
        retention-days: 7

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 7 