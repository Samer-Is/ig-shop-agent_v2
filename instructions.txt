CURSOR AI DEVELOPMENT PROMPT: Instagram AI Agent SaaS Platform
Project Objective: Construct a multi-tenant SaaS web application that provides an AI-powered agent to manage Instagram Direct Messages for e-commerce merchants. The application will be built on an Azure infrastructure, utilize GPT-4o for its conversational AI, and feature separate dashboards for merchants and the vendor.

Core Development Principles:

Phased Execution: You will build this application in the distinct phases outlined below. Do not proceed to the next phase until all tasks in the current phase are complete, tested, and marked as DONE.

Plan Before Coding: For each phase, first outline a brief technical plan. Describe the primary components, data models, and API endpoints you will create for that phase.

Incremental & Testable Chunks: Within each phase, develop features in small, logical chunks. After implementing a chunk (e.g., a single API endpoint), write a brief confirmation of its functionality or a simple test before moving on.

Live Data & APIs: All development must use live API connections and data structures. Do not use mock data or hardcoded values for core functionalities.

Technology Stack:

Cloud Provider: Microsoft Azure

AI Model: GPT-4o (via Azure OpenAI Service)

Backend: Azure Functions or Azure App Service (using Node.js/TypeScript or Python/FastAPI)

Database: Azure Cosmos DB (NoSQL API)

Frontend: React with Vite (TypeScript) hosted on Azure Static Web Apps

CI/CD: GitHub Actions

Secrets: Azure Key Vault

File Storage: Azure Blob Storage

Search/Indexing: Azure Cognitive Search

The Phased Development Plan
Phase 0: Project Scaffolding & Core Infrastructure Setup
Goal: Prepare the foundational environment for development and deployment.

Task 0.1: Initialize a new GitHub repository with a monorepo structure: /backend and /frontend directories.

Task 0.2: Provision core Azure resources using Azure CLI scripts or ARM/Bicep templates:

Azure Resource Group

Azure Cosmos DB Account (with a database named SaaSPlatformDB)

Azure Key Vault

Azure OpenAI Service resource

Azure App Service Plan & App Service (or Azure Functions App)

Azure Static Web App resource

Task 0.3: Set up a basic CI/CD pipeline in GitHub Actions that triggers on pushes to the main branch. For now, it should just build the backend and frontend code successfully.

Phase 0 Validation: All Azure resources are provisioned. The initial GitHub Actions workflow completes without errors.

Phase 0 Status: [PENDING]
Phase 1: Backend Foundation & Merchant Authentication
Goal: Build the core API, data models, and the merchant onboarding/authentication flow.

Task 1.1: Data Modeling. In the /backend code, define the initial Cosmos DB container schemas:

merchants: To store merchant info, configuration, Instagram tokens, and subscription tier. Include a pageId field.

whitelist: A simple collection to store the instagram_page_id of approved merchants.

Task 1.2: Whitelist & Onboarding API. Create an API endpoint (POST /api/onboard) that handles the Instagram OAuth 2.0 callback.

It receives the auth code from the frontend.

Exchanges it for a long-lived user access token and page details (including page_id).

Crucially, it checks if the received page_id exists in the whitelist container.

If whitelisted, create a new merchant document in the merchants container. If not, return an authorization error.

Store the encrypted access token in Azure Key Vault, referencing the Key Vault secret URI in the merchant's document.

Task 1.3: Merchant Settings API. Create secure CRUD API endpoints for merchants to manage their core data:

product_catalog (Name, Description, Rules, Media Links)

business_info (Working Hours, Terms & Conditions, Rules)

ai_settings (Custom Prompt)

Ensure all endpoints are authenticated and authorized, only allowing a merchant to access their own data.

Phase 1 Validation: A new merchant can be successfully created via the API only if their Instagram page ID is on the whitelist. They can successfully update their product catalog and business info via API calls.

Phase 1 Status: [PENDING]
Phase 2: The Basic AI Conversation Loop
Goal: Achieve the first end-to-end flow: receiving an Instagram message and replying with AI.

Task 2.1: Meta Webhooks Receiver. Create an API endpoint (POST /api/webhooks/instagram) to receive real-time updates from the Meta Graph API. Implement the required verification handshake.

Task 2.2: Core RAG Logic. When a message is received:

Extract the page_id to identify the merchant.

Retrieve the merchant's product_catalog, business_info, and ai_settings from Cosmos DB.

Construct a detailed system prompt for GPT-4o. This prompt must instruct the AI to act as a helpful shop assistant, use the provided context (catalog, rules, etc.), and respond in either English or Jordanian Arabic based on the customer's language.

Task 2.3: AI Response Generation. Send the constructed prompt and the customer's message to your Azure OpenAI GPT-4o deployment.

Task 2.4: Reply via Graph API. Use the merchant's stored access token to send the AI-generated response back to the customer via the Instagram Graph API.

Phase 2 Validation: Send a DM to a connected Instagram page. The webhook should fire, the AI should generate a context-aware response, and the reply should appear in the Instagram chat.

Phase 2 Status: [PENDING]
Phase 3: Merchant Dashboard V1
Goal: Build the user interface for merchants to control the system.

Task 3.1: Frontend Scaffolding & Authentication. In the /frontend directory, build a React app. Create a login page that initiates the Instagram OAuth flow and handles the callback, calling the /api/onboard endpoint. Implement protected routes for the dashboard.

Task 3.2: Dashboard UI. Create pages that interface with the APIs from Phase 1:

A page for managing the Product Catalog (add, edit, delete products).

A page for updating Business Info and the Custom AI Prompt.

A simple analytics page (placeholder for now).

Task 3.3: Data Export. Implement a "Download as CSV" button for the Product Catalog and any other relevant data.

Task 3.4: Live Chat Simulation/Playground. Create a page where the merchant can type a message and see exactly how their configured AI would respond, using the live AI backend.

Phase 3 Validation: A merchant can log in, fully manage their settings and products via the UI, and test their AI's responses in the playground.

Phase 3 Status: [PENDING]
Phase 4: Advanced AI - Context & Understanding
Goal: Make the AI smarter and more perceptive.

Task 4.1: Sentiment Analysis. Modify the AI prompt. Add a step to first analyze the customer's message for sentiment (e.g., angry, confused, happy, neutral). Instruct GPT-4o to adjust its tone accordingly and to use a special flag (e.g., [HUMAN_HANDOVER]) in its internal thought process if the sentiment is highly negative.

Task 4.2: Intent Analytics. Instruct the AI to also classify the user's intent (e.g., price_inquiry, stock_check, order_placement, shipping_question, other). Store this intent along with the message log in Cosmos DB. Create a new API endpoint to aggregate this data for the merchant.

Task 4.3: Voice Message Transcription. Integrate Azure Cognitive Services (Speech-to-Text). When the webhook payload indicates an audio message, download the audio, send it to the Speech-to-Text API, and use the resulting transcript as the customer's message for the AI.

Phase 4 Validation: The AI's tone changes with customer sentiment. Intents are visible in the database. Sending a voice note to the Instagram page results in a correct text-based reply.

Phase 4 Status: [PENDING]
Phase 5: Order Management System
Goal: Reliably capture order information from unstructured chat.

Task 5.1: AI Entity Recognition for Orders. Heavily augment the AI prompt. Instruct it to identify a clear order_placement intent. When this intent is detected, it must extract key entities: product name, quantity, size, color, customer name, phone number, and address. It should be instructed to ask clarifying questions if information is missing.

Task 5.2: Order Data Model & API. Create an orders container in Cosmos DB with fields for all extracted entities, a status field (pending_confirmation, confirmed, shipped), and the merchantId. Create API endpoints for managing these orders.

Task 5.3: AI Order Creation. When the AI has successfully extracted all necessary order information, it should make an internal API call to create a new order document with the pending_confirmation status.

Task 5.4: Orders UI. Build an "Orders Sheet" page in the merchant dashboard where they can view pending orders, confirm them (changing the status), and download the sheet as a CSV.

Phase 5 Validation: A test conversation leading to an order results in a new entry appearing in the "Orders Sheet" in the dashboard with the correct details and a "pending" status. The merchant can confirm it.

Phase 5 Status: [PENDING]
Phase 6: Advanced Platform Features
Goal: Add value for both merchants and the vendor.

Task 6.1: Conversation Handover Protocol. When the AI flags a conversation for [HUMAN_HANDOVER], the system should send a notification to the merchant (e.g., email or push notification). Add a "Live Conversations" view to the dashboard where the merchant can see ongoing chats and a "Take Over" button to pause the AI and reply manually.

Task 6.2: Knowledge Base Ingestion.

Create an interface for merchants to upload files (PDF, DOCX) to Azure Blob Storage or provide website links.

Use an Azure Function triggered by the file upload to process the content and index it in Azure Cognitive Search, linking it to the merchantId.

Update the RAG logic (Phase 2) to first query the merchant's Cognitive Search index for relevant context before calling GPT-4o.

Task 6.3: Vendor Admin Dashboard. Create a separate, secure frontend application for the vendor. This dashboard should have views to:

Manage the whitelist.

View all registered merchants.

See high-level analytics (total messages processed, orders created per merchant).

Phase 6 Validation: Uploading a PDF makes its content available to the AI. A conversation can be successfully handed over to a human. The vendor can log in and view platform-wide stats.

Phase 6 Status: [PENDING]
Phase 7: Proactive Engagement & Growth (Premium Features)
Goal: Implement outbound and automated messaging features.

Task 7.1: State Tracking for Carts. Log when a user discusses a product in detail but doesn't complete the order. Create a scheduled Azure Function that runs daily.

Task 7.2: Abandoned Cart Follow-up. The scheduled function checks for "abandoned carts" older than a set time (e.g., 6 hours) and uses the AI to generate and send a polite follow-up message.

Task 7.3: Back-in-Stock Notifications. When a merchant updates a product's stock from 0 to >0, trigger a function that finds all users who previously inquired about that product (based on message logs) and sends them a notification.

Task 7.4: Broadcast Messaging. Build a UI for merchants to compose a message and send it to all users who have interacted with them in the last 24 hours (strictly adhering to Instagram's 24-hour window policy).

Phase 7 Validation: All proactive messaging features can be configured and are demonstrated to work correctly in a test environment.

Phase 7 Status: [PENDING]
Phase 8: Monetization & Billing
Goal: Integrate billing and subscription management to make the platform commercially viable.

Task 8.1: Payment Gateway Integration. Integrate Stripe or a similar payment provider to handle subscriptions.

Task 8.2: Tiered Pricing Logic.

Update the merchants data model to include a subscriptionTier (basic, pro, enterprise) and conversationCount.

Create a middleware in your backend that checks a merchant's tier before allowing access to premium features (e.g., Voice Transcription, Knowledge Base).

Increment conversationCount for each AI reply.

Task 8.3: Usage-Based Billing. If conversationCount exceeds the tier limit, either block the service until the next cycle or automatically bill for overages, depending on the chosen model.

Task 8.4: Subscription UI. Add a "Billing" or "Subscription" page to the merchant dashboard where they can select a plan, enter payment details, and view their current usage.

Task 8.5: Affiliate Program. Design a simple system where merchants get a unique referral code. Track sign-ups using this code in the database to manage future payouts or discounts.

Phase 8 Validation: A merchant can subscribe to a paid plan. Access to features is correctly restricted by tier. Usage is tracked accurately.

Phase 8 Status: [PENDING]
Final Review: Once all phases are marked as DONE, conduct a full end-to-end review of the platform, clean up the code, and prepare for the official launch.